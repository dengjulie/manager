returns a function instead now

redux thunk sees that so it immediately calls that function
when the request is complete, .then() runs, and inside of the .then() we MANUALLY DISPATCH OUR ACTION

by giving us access to dispatch, we can call it at any point in time (.then, .catch)
can manually dispatch an action instead of returning an action from the action creator itself

.then(user => {
  dispatch({ type: 'LOGIN_USER_SUCESS', payload: user });
});

need more robust handling around the action creator
because we have access to the  dispatch method, we can dispatch as many actions as we would like from a single action creator

redux thunk is very code gross - helper functions
do not export method

const loginUserSuccess = (dispatch, user) => {
  dispatch({
    type: LOGIN_USER_SUCESS,
    payload: user
  });
};

.then(user => loginUserSuccess(dispatch, user));

const loginUserFail = (dispatch) => {
  dispatch({ type: LOGIN_USER_FAIL });
};
can have no payload!

remember to update mapStateToProps !
renderError() {
  if (this.props.error) {
  }
}

if we have an error in loginUserSuccess method, it goes to the catch case
only good fix is:
.catch((error) => {
  console.log(error);
